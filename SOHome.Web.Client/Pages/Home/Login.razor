@using SOHome.Common.Exceptions
@inject IAuthService authService
@inject NavigationManager navigationManager
@page "/login"
@attribute [AllowAnonymous]
@if (showErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@errors</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5>Acesso ao sistema</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator/>
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Nome de usuário</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username"/>
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>            
            <div class="form-group">
                <label for="password">Senha</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password"/>
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Entrar no sistema</button>
        </EditForm>
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool showErrors;
    private string errors;
    private string returnUrl;

    public void OnGet(string returnUrl = null)
    {
        this.returnUrl = returnUrl;
    }

    private async Task HandleLogin()
    {
        showErrors = false;

        try
        {
            var result = await authService.LoginAsync(loginModel);
            if (string.IsNullOrEmpty(returnUrl))
                navigationManager.NavigateTo("/dashboard");
            else
                navigationManager.NavigateTo($"/dashboard?returnUrl={returnUrl}");
        }
        catch(LoginException ex)
        {
            errors = ex.Message;
            showErrors = true;
        }
    }
}
