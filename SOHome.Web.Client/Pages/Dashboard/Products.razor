@page "/dashboard/products"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@layout PanelLayout
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigationManager

@if (IsBusy)
{
    <div class="spinner"></div>
}
else
{
    @if (products.Count == 0)
    {
        <p><em>Nenhum produto cadastrado!</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Código de barras</th>
                    <th>Nome</th>
                    <th>Preço</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Code</td>
                        <td>@product.Barcode</td>
                        <td>@product.Name</td>
                        <td>@product.Price</td>
                        <td>
                            <div>
                                <button @onclick="@(e => EditProduct(@product.Code))">✏️</button>
                                <button @onclick="@(e => RemoveProduct(@product.Code))">❌</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <div>
        <button class="btn btn-primary" @onclick="CreateProduct">Cadastrar produto</button>
    </div>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private List<ProductModel> products = new List<ProductModel>();
    private bool isBusy = true;
    private bool IsBusy 
    {
        get => isBusy;
        set
        {
            isBusy = value;
            StateHasChanged();
        }
    }
    private void CreateProduct()
    {
        navigationManager.NavigateTo("dashboard/product/novo");
    }

    private void EditProduct(int code)
    {
        IsBusy = true;
        try
        {
            navigationManager.NavigateTo($"dashboard/product/{code}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsBusy = false;
        }
    }
    private async Task RemoveProduct(int code)
    {
        try
        {
            var modal = Modal.Show<ConfirmRemove>();
            var result = await modal.Result;
            if (result.Cancelled)
                return;

            IsBusy = true;
            await Http.DeleteAsync($"api/products/{code}");
            var produto = products.First(x => x.Code == code);
            products.Remove(produto);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsBusy = false;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;
        try
        {
            products = await Http.GetFromJsonAsync<List<ProductModel>>("api/products");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsBusy = false;
        }
    }
}
