// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SOHome.Domain.Data;

#nullable disable

namespace SOHome.Migrations
{
    [DbContext(typeof(SOHomeDbContext))]
    [Migration("20211116010658_AddReferencedTablePerson")]
    partial class AddReferencedTablePerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("grid_seq");

            modelBuilder.HasSequence("person_code_seq");

            modelBuilder.HasSequence("user_code_seq");

            modelBuilder.Entity("SOHome.Domain.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXTVAL('grid_seq')");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasDefaultValueSql("NEXTVAL('person_code_seq')");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StreetName")
                        .HasColumnType("text")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text")
                        .HasColumnName("street_number");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("SOHome.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXTVAL('grid_seq')");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasDefaultValueSql("NEXTVAL('user_code_seq')");

                    b.Property<char>("Flag")
                        .HasColumnType("character(1)")
                        .HasColumnName("flag");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("person_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_users_person_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SOHome.Domain.Models.User", b =>
                {
                    b.HasOne("SOHome.Domain.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_people_person_id");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
